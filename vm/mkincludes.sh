#!/bin/bash

echo "// WARNING: File is autogenerated, changes are overwritten!" > op_enum.h
echo "// WARNING: File is autogenerated, changes are overwritten!" > op_str.h
echo "// WARNING: File is autogenerated, changes are overwritten!" > op_switch.h
echo "char *opcodestr[] = {" >> op_str.h

OPS=$(grep  -o 'OPCODE([^)]*)' *.c | cut -d'(' -f 2 | tr -d ' )')

echo "typedef struct exec exec_t;" > op_enum.h
for LOP in $OPS; do
  echo "void op_$LOP(exec_t *);" >> op_enum.h
done;
echo "enum opcodes {" >> op_enum.h
  echo "  INVALID," >> op_enum.h
  echo "  \"INVALID\"," >> op_str.h
for LOP in $OPS; do
  OP=$(echo $LOP | tr "[a-z]" "[A-Z]")
  echo "  $OP," >> op_enum.h
  echo " \"$OP\"," >> op_str.h
  echo "  case $OP:" >> op_switch.h
  echo "    op_$LOP(exec);" >> op_switch.h
  echo "    break;" >> op_switch.h

done;
echo "  MAX_OP" >> op_enum.h
echo "};" >> op_enum.h
echo "  \"MAX_OP\"" >> op_str.h
echo "};" >> op_str.h

echo "// WARNING: File is autogenerated, changes are overwritten!" > nativefuns.h
NATIVE=$(grep  -o 'NATIVE([^)]*)' *.c | cut -d'(' -f 2 | tr -d ' )')
for FUN in $NATIVE; do
  echo "val_t *native_$FUN (exec_t *exec, val_t *args);" >> nativefuns.h
done;
echo "val_t *call_native (exec_t *exec, char *id, val_t *args) {" >> nativefuns.h
echo " if (0) {" >> nativefuns.h
for FUN in $NATIVE; do
   echo "  } else if (strcmp(id, \"$FUN\") == 0) {" >> nativefuns.h
   echo "     return native_$FUN(exec, args);" >> nativefuns.h
done;
echo " } else { return NULL; }" >> nativefuns.h
echo "}" >> nativefuns.h

NATIVE=$(grep  -o 'NATIVE([^)]*)' *.c | cut -d'(' -f 2 | tr -d ' )')
echo "int native_exists (char *id) {" >> nativefuns.h
echo " if (0) {" >> nativefuns.h
for FUN in $NATIVE; do
   echo "  } else if (strcmp(id, \"$FUN\") == 0) {" >> nativefuns.h
   echo "     return 1;" >> nativefuns.h
done;
echo " } else { return 0; }" >> nativefuns.h
echo "}" >> nativefuns.h


